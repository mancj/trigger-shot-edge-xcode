// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidMachineWebKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import BidMachineUtilsKit
@_exported import BidMachineWebKit
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import libxml2
public protocol BidMachineWebControllerDelegate : AnyObject {
  func webController(_ controller: BidMachineWebKit.BidMachineWebController, didLoadLoad error: BidMachineUtilsKit.BidMachineError?)
  func webController(_ controller: BidMachineWebKit.BidMachineWebController, didReceiveNavigation url: Foundation.URL)
  func webController(_ controller: BidMachineWebKit.BidMachineWebController, didReceiveCustomClose customClose: Swift.Bool)
  func webController(_ controller: BidMachineWebKit.BidMachineWebController, didReceiveLog message: Swift.String)
  func webController(_ controller: BidMachineWebKit.BidMachineWebController, didReceiveCloseComand: Swift.String)
  func webController(_ controller: BidMachineWebKit.BidMachineWebController, didLayout webView: WebKit.WKWebView)
  func webController(_ controller: BidMachineWebKit.BidMachineWebController, execute command: Swift.String, error: BidMachineUtilsKit.BidMachineError?)
}
final public class BidMachineWebController {
  weak final public var delegate: (any BidMachineWebKit.BidMachineWebControllerDelegate)?
  public init(_ configuration: Any)
  @objc deinit
}
extension BidMachineWebKit.BidMachineWebController {
  final public var webInterface: any BidMachineWebKit.BidMachineInterfaceProperties {
    get
  }
  final public var container: UIKit.UIView {
    get
  }
  final public func loadAd(adm: Swift.String)
  final public func fire(command: BidMachineWebKit.BidMachineWebBridgeCommand)
  final public func fire(commands: [BidMachineWebKit.BidMachineWebBridgeCommand])
}
public enum BidMachineWebBridgeCommand {
  case ready
  case state(_: BidMachineWebKit.BidMachineWebBridgeCommand.MraidState)
  case viewable(_: Swift.Bool)
  case defaultPosition(_: CoreFoundation.CGRect)
  case currentPosition(_: CoreFoundation.CGRect)
  case maxSize(_: CoreFoundation.CGSize)
  case screenSize(_: CoreFoundation.CGSize)
  case placement(_: BidMachineWebKit.BidMachineWebBridgeCommand.MraidPlacement)
  case features(_: [BidMachineWebKit.BidMachineWebBridgeCommand.MraidFeature])
  case custom(_: Swift.String)
  case simulateClick(_: CoreFoundation.CGPoint)
}
extension BidMachineWebKit.BidMachineWebBridgeCommand {
  public enum MraidState : Swift.String {
    case loading
    case `default`
    case expanded
    case resized
    case hidden
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MraidPlacement : Swift.String {
    case inline
    case interstitial
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MraidFeature : Swift.String, Swift.CaseIterable {
    case sms, tel, calendar, storePicture, inlineVideo
    public init?(rawValue: Swift.String)
    public typealias AllCases = [BidMachineWebKit.BidMachineWebBridgeCommand.MraidFeature]
    public typealias RawValue = Swift.String
    public static var allCases: [BidMachineWebKit.BidMachineWebBridgeCommand.MraidFeature] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol BidMachineInterfaceOrientationProperties {
}
public protocol BidMachineInterfaceExpandProperties {
}
public protocol BidMachineInterfaceResizeProperties {
}
public protocol BidMachineInterfaceProperties {
  var resize: (any BidMachineWebKit.BidMachineInterfaceResizeProperties)? { get }
  var expand: (any BidMachineWebKit.BidMachineInterfaceExpandProperties)? { get }
  var orientation: (any BidMachineWebKit.BidMachineInterfaceOrientationProperties)? { get }
}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidState : Swift.Equatable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidState : Swift.Hashable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidState : Swift.RawRepresentable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidPlacement : Swift.Equatable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidPlacement : Swift.Hashable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidPlacement : Swift.RawRepresentable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidFeature : Swift.Equatable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidFeature : Swift.Hashable {}
extension BidMachineWebKit.BidMachineWebBridgeCommand.MraidFeature : Swift.RawRepresentable {}
