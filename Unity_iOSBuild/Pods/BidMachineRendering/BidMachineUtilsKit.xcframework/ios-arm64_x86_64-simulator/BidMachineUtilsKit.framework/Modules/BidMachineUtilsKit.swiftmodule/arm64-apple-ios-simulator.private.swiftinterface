// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidMachineUtilsKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import BidMachineUtilsKit
import Foundation
import StackFoundation
import StackUIKit
import Swift
import UIKit.UIApplication
import UIKit
import UIKit.UIScreen
import _Concurrency
import _StringProcessing
public protocol Application : AnyObject {
  var state: BidMachineUtilsKit.ApplicationState { get }
  var window: UIKit.UIWindow? { get }
  var interfaceOrientation: BidMachineUtilsKit.InterfaceOrientation { get }
}
public enum ApplicationState {
  case active
  case inactive
  case background
  public var isActive: Swift.Bool {
    get
  }
  public static func == (a: BidMachineUtilsKit.ApplicationState, b: BidMachineUtilsKit.ApplicationState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum InterfaceOrientation {
  case portrait, landscape
  public var isPortrait: Swift.Bool {
    get
  }
  public static func == (a: BidMachineUtilsKit.InterfaceOrientation, b: BidMachineUtilsKit.InterfaceOrientation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIApplication : BidMachineUtilsKit.Application {
  @_Concurrency.MainActor(unsafe) public var state: BidMachineUtilsKit.ApplicationState {
    get
  }
  @_Concurrency.MainActor(unsafe) public var window: UIKit.UIWindow? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var interfaceOrientation: BidMachineUtilsKit.InterfaceOrientation {
    get
  }
}
public protocol BidMachineErrorTypeBuilder {
  var connection: any BidMachineUtilsKit.BidMachineErrorValueBuilder { get }
  var badContent: any BidMachineUtilsKit.BidMachineErrorValueBuilder { get }
  var timeout: any BidMachineUtilsKit.BidMachineErrorValueBuilder { get }
  var noContent: any BidMachineUtilsKit.BidMachineErrorValueBuilder { get }
  var exception: any BidMachineUtilsKit.BidMachineErrorValueBuilder { get }
  var interior: any BidMachineUtilsKit.BidMachineErrorValueBuilder { get }
}
public protocol BidMachineErrorValueBuilder {
  func withDescription(_ description: Swift.String) -> BidMachineUtilsKit.BidMachineError
  func withError(_ description: Swift.String, _ error: (any Swift.Error)?) -> BidMachineUtilsKit.BidMachineError
  func withExeption(_ description: Swift.String, _ error: any Swift.Error) -> BidMachineUtilsKit.BidMachineError
}
extension Foundation.URL {
  public var isRemoteLink: Swift.Bool {
    get
  }
  public var isStoreLink: Swift.Bool {
    get
  }
  public var storeItemIdentifier: Swift.UInt? {
    get
  }
  public func urlPath(shouldPercentEncode: Swift.Bool = false) -> Swift.String
}
public protocol FileStorage {
  func url(for searchPathDirectory: BidMachineUtilsKit.FileStorageSearchPathDirectory, in domain: BidMachineUtilsKit.FileStorageSearchPathDomainMask) -> Foundation.URL?
  func createFile(at path: Swift.String, contents: Foundation.Data?)
  func fileExists(at path: Swift.String) -> Swift.Bool
  func removeFile(at path: Swift.String)
}
public enum FileStorageSearchPathDirectory {
  case caches
  case applicationSupport
  public static func == (a: BidMachineUtilsKit.FileStorageSearchPathDirectory, b: BidMachineUtilsKit.FileStorageSearchPathDirectory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FileStorageSearchPathDomainMask {
  case userDomainMask
  public static func == (a: BidMachineUtilsKit.FileStorageSearchPathDomainMask, b: BidMachineUtilsKit.FileStorageSearchPathDomainMask) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.FileManager : BidMachineUtilsKit.FileStorage {
  public func url(for searchPathDirectory: BidMachineUtilsKit.FileStorageSearchPathDirectory, in domain: BidMachineUtilsKit.FileStorageSearchPathDomainMask) -> Foundation.URL?
  public func createFile(at path: Swift.String, contents: Foundation.Data?)
  public func fileExists(at path: Swift.String) -> Swift.Bool
  public func removeFile(at path: Swift.String)
}
public struct Base32Decoder {
  public init()
  public func decode(_ string: Swift.String, shouldRemovingPercentEncoding: Swift.Bool = true) throws -> Foundation.Data
}
extension BidMachineUtilsKit.Base32Decoder {
  public enum Error : Swift.Error {
    case invalidEncodedString
    case invalidEncodedStringLength
    public static func == (a: BidMachineUtilsKit.Base32Decoder.Error, b: BidMachineUtilsKit.Base32Decoder.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol ErrorProviderDomain {
  static var errorDomain: Swift.String { get }
}
public struct ErrorProvider {
  public static func unknown(_ name: Swift.String) -> any BidMachineUtilsKit.BidMachineErrorTypeBuilder
  public static func from<T>(_ domain: T.Type) -> any BidMachineUtilsKit.BidMachineErrorTypeBuilder where T : BidMachineUtilsKit.ErrorProviderDomain
}
public struct AnyValue {
  public init(_ wrapped: Any?)
  public func value<T>() -> T?
}
public protocol KeyValueStorge {
  func getValue<T>(for key: Swift.String) -> T?
  func setValue(_ value: Any?, by key: Swift.String)
  func removeValue(by key: Swift.String)
}
extension Foundation.UserDefaults : BidMachineUtilsKit.KeyValueStorge {
  public func getValue<T>(for key: Swift.String) -> T?
  public func setValue(_ value: Any?, by key: Swift.String)
  public func removeValue(by key: Swift.String)
}
public class Timer {
  public func start(_ interval: Foundation.TimeInterval, _ periodic: Swift.Bool, _ tick: @escaping () -> Swift.Void)
  public func invalidate()
  public init()
  @objc deinit
}
public class ExtendedTimer {
  public init(interval: Foundation.TimeInterval? = nil, period: Swift.Double = 0.5)
  public func start(interval: Foundation.TimeInterval? = nil, tick: @escaping (_ leeway: Swift.Double, _ interval: Swift.Double) -> Swift.Void, completion: @escaping (_ interval: Swift.Double) -> Swift.Void)
  public func pause()
  public func resume()
  public func invalidate()
  @objc deinit
}
public protocol ApplicationStateObserverDelegate : AnyObject {
  func applicationStateObserver(_ observer: any BidMachineUtilsKit.ApplicationStateObserver, didChange state: BidMachineUtilsKit.ApplicationState)
}
public protocol ApplicationStateObserver : AnyObject {
  var delegate: (any BidMachineUtilsKit.ApplicationStateObserverDelegate)? { get set }
  var currentApplicationState: BidMachineUtilsKit.ApplicationState { get }
  func startObserving()
  func stopObserving()
}
final public class ApplicationStateObserverImpl : BidMachineUtilsKit.ApplicationStateObserver {
  weak final public var delegate: (any BidMachineUtilsKit.ApplicationStateObserverDelegate)?
  final public var currentApplicationState: BidMachineUtilsKit.ApplicationState {
    get
  }
  public init(application: any BidMachineUtilsKit.Application = UIApplication.shared)
  final public func startObserving()
  final public func stopObserving()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func equal(_ view: UIKit.UIView, _ inset: UIKit.UIEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) public func equalCenter(_ view: UIKit.UIView)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func load(_ url: Foundation.URL?, _ placeholder: UIKit.UIImage?)
}
extension UIKit.UIColor {
  public static func color(from hex: Swift.String?) -> UIKit.UIColor
}
public protocol ScreenInfoProvider {
  var deviceSize: CoreFoundation.CGSize { get }
  var displaySize: CoreFoundation.CGSize { get }
}
public struct ScreenInfoProviderImp {
  public init(application: any BidMachineUtilsKit.Application = UIApplication.shared)
}
extension BidMachineUtilsKit.ScreenInfoProviderImp : BidMachineUtilsKit.ScreenInfoProvider {
  public var deviceSize: CoreFoundation.CGSize {
    get
  }
  public var displaySize: CoreFoundation.CGSize {
    get
  }
}
extension Foundation.NotificationCenter {
  public func remove(observer: (any ObjectiveC.NSObjectProtocol)?)
}
public enum DispatchPipeline {
  public enum LineType {
    case serial
    case concurent
    public static func == (a: BidMachineUtilsKit.DispatchPipeline.LineType, b: BidMachineUtilsKit.DispatchPipeline.LineType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case main
  case global
  case background(_: BidMachineUtilsKit.DispatchPipeline.LineType)
  case unknown(_: Swift.String, _: BidMachineUtilsKit.DispatchPipeline.LineType)
}
extension BidMachineUtilsKit.DispatchPipeline {
  public func sync<T>(execute work: () throws -> T) rethrows -> T
  public func async(execute work: @escaping () -> Swift.Void)
}
public struct BidMachineError {
}
extension BidMachineUtilsKit.BidMachineError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension BidMachineUtilsKit.BidMachineError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BidMachineUtilsKit.BidMachineError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var wrappedError: (any Swift.Error)? {
    get
  }
  public var module: Swift.String {
    get
  }
}
extension CoreFoundation.CGFloat {
  public var int: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DataCacher {
  public static func cacheUrl(_ url: Foundation.URL, completion: @escaping (StackFoundation.STKFile?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public protocol Screen {
  var size: CoreFoundation.CGSize { get }
}
public struct ScreenImp {
  public init(application: any BidMachineUtilsKit.Application = UIApplication.shared)
}
extension BidMachineUtilsKit.ScreenImp : BidMachineUtilsKit.Screen {
  public var size: CoreFoundation.CGSize {
    get
  }
}
extension Swift.String {
  public func capitalizingFirstLetter() -> Swift.String
  public mutating func capitalizeFirstLetter()
}
extension Swift.String {
  public func lowercaseFirstLetter() -> Swift.String
  public mutating func lowercaseFirstLetter()
}
extension Swift.String {
  public func underscoreToCamelcase() -> Swift.String
}
extension Swift.String {
  public func base64Encoded() -> Swift.String?
  public func base64Decoded() -> Swift.String?
}
@objc open class AsyncOperation : Foundation.Operation {
  public enum State : Swift.String {
    case ready, executing, finished
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var state: BidMachineUtilsKit.AsyncOperation.State {
    get
    set
  }
  @objc override dynamic open var isReady: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func start()
  @objc override dynamic open func cancel()
  public init(_ dispatch: BidMachineUtilsKit.DispatchPipeline)
  @objc deinit
}
extension Swift.Dictionary where Key == Swift.String {
  public func decode<T>(_ value: T.Type) throws -> T where Value == Any, T : Swift.Decodable
  public func stringify() throws -> Swift.String
}
public class RotationControllerPresenter {
  weak public var rootController: UIKit.UIViewController?
  public init()
  @objc deinit
}
extension BidMachineUtilsKit.RotationControllerPresenter {
  public var controller: UIKit.UIViewController {
    get
  }
  public var container: UIKit.UIView {
    get
  }
  public func present(orientation: UIKit.UIInterfaceOrientation, autorotate: Swift.Bool, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
extension BidMachineUtilsKit.ApplicationState : Swift.Equatable {}
extension BidMachineUtilsKit.ApplicationState : Swift.Hashable {}
extension BidMachineUtilsKit.InterfaceOrientation : Swift.Equatable {}
extension BidMachineUtilsKit.InterfaceOrientation : Swift.Hashable {}
extension BidMachineUtilsKit.FileStorageSearchPathDirectory : Swift.Equatable {}
extension BidMachineUtilsKit.FileStorageSearchPathDirectory : Swift.Hashable {}
extension BidMachineUtilsKit.FileStorageSearchPathDomainMask : Swift.Equatable {}
extension BidMachineUtilsKit.FileStorageSearchPathDomainMask : Swift.Hashable {}
extension BidMachineUtilsKit.Base32Decoder.Error : Swift.Equatable {}
extension BidMachineUtilsKit.Base32Decoder.Error : Swift.Hashable {}
extension BidMachineUtilsKit.DispatchPipeline.LineType : Swift.Equatable {}
extension BidMachineUtilsKit.DispatchPipeline.LineType : Swift.Hashable {}
extension BidMachineUtilsKit.AsyncOperation.State : Swift.Equatable {}
extension BidMachineUtilsKit.AsyncOperation.State : Swift.Hashable {}
extension BidMachineUtilsKit.AsyncOperation.State : Swift.RawRepresentable {}
