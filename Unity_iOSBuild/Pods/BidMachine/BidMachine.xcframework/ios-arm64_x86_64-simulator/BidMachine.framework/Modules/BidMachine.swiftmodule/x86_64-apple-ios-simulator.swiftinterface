// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidMachine
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import BidMachine
import BidMachineApiCore
import BidMachineBidding
import BidMachineModules
import CoreLocation
import Foundation
import StackFoundation
import StackProductPresentation
import StackUIKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc final public class BidMachineNetworkConfiguraton : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let params: [Swift.String : Any]?
  @objc final public let extras: [Swift.String : Any]?
  @objc(initWithName:params:extras:) public init(_ name: Swift.String, _ params: [Swift.String : Any]?, _ extras: [Swift.String : Any]?)
  @objc deinit
}
@objc public protocol BidMachineAuctionResponseProtocol {
  @objc var bidId: Swift.String { get }
  @objc var creativeId: Swift.String? { get }
  @objc var dealId: Swift.String? { get }
  @objc var cId: Swift.String? { get }
  @objc var demandSource: Swift.String { get }
  @objc var price: Swift.Double { get }
  @objc var customParams: [Swift.String : Any] { get }
  @objc var customExtras: [Swift.String : Any] { get }
}
@objc extension BidMachine.BidMachineSdk {
  @objc(notifyMediationWin:) final public func notifyMediationWin(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc(notifyMediationLoss:ecpm:ad:) final public func notifyMediationLoss(_ winner: Swift.String, _ ecpm: Swift.Double, _ ad: any BidMachine.BidMachineAdProtocol)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class BidMachineSdk : ObjectiveC.NSObject {
  @objc public static let shared: BidMachine.BidMachineSdk
  @objc public static let sdkVersion: Swift.String
  @objc public static let sdkName: Swift.String
  @objc public static let partnerName: Swift.String
  @objc public static let partnerVersion: Swift.String
  @objc deinit
}
@objc extension BidMachine.BidMachineSdk {
  @objc final public func initializeSdk(_ sourceId: Swift.String)
  @objc final public var token: Swift.String? {
    @objc get
  }
  @objc final public func token(with format: BidMachineApiCore.PlacementFormat, completion: @escaping (Swift.String?) -> Swift.Void)
}
extension BidMachine.BidMachineSdk {
  final public func installFeature(_ name: Swift.String, _ value: Any?)
}
extension BidMachine.BidMachineSdk : BidMachine.BidMachineInfoProtocol {
  @objc final public var isInitialized: Swift.Bool {
    @objc get
  }
  @objc final public var publisherInfo: any BidMachine.BidMachinePublisherInfoProtocol {
    @objc get
  }
  @objc final public var targetingInfo: any BidMachine.BidMachineTargetingInfoProtocol {
    @objc get
  }
  @objc final public var regulationInfo: any BidMachine.BidMachineRegulationInfoProtocol {
    @objc get
  }
  @objc final public var biddingInfo: any BidMachine.BidMachineBiddingInfoProtocol {
    @objc get
  }
  @objc final public func populate(_ builderBlock: (any BidMachine.BidMachineInfoBuilderProtocol) -> Swift.Void)
}
public typealias BidMachineInfoBuilderBlock = (any BidMachine.BidMachineInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineInfoBuilderProtocol {
  @objc @discardableResult
  func withTestMode(_ test: Swift.Bool) -> Self
  @objc @discardableResult
  func withLoggingMode(_ logging: Swift.Bool) -> Self
  @objc @discardableResult
  func withBidLoggingMode(_ logging: Swift.Bool) -> Self
  @objc @discardableResult
  func withEventLoggingMode(_ logging: Swift.Bool) -> Self
  @objc @discardableResult
  func withSSP(_ ssp: Swift.String) -> Self
}
@objc public protocol BidMachineInfoProtocol {
  @objc var isInitialized: Swift.Bool { get }
  @objc var publisherInfo: any BidMachine.BidMachinePublisherInfoProtocol { get }
  @objc var targetingInfo: any BidMachine.BidMachineTargetingInfoProtocol { get }
  @objc var regulationInfo: any BidMachine.BidMachineRegulationInfoProtocol { get }
  @objc var biddingInfo: any BidMachine.BidMachineBiddingInfoProtocol { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineInfoBuilderProtocol) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class BidMachineBanner : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToSuperview()
  @objc deinit
}
@objc extension BidMachine.BidMachineBanner : BidMachine.BidMachineAdProtocol {
  @_Concurrency.MainActor(unsafe) @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc final public func loadAd()
}
public typealias BidMachineBiddingInfoBuilderBlock = (any BidMachine.BidMachineBiddingInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineBiddingInfoBuilderProtocol {
  @objc @discardableResult
  func withTestMode(_ test: Swift.Bool) -> Self
  @objc @discardableResult
  func withLoggingMode(_ logging: Swift.Bool) -> Self
}
@objc public protocol BidMachineBiddingInfoProtocol {
  @objc var isTestMode: Swift.Bool { get }
  @objc var isLoggingMode: Swift.Bool { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineBiddingInfoBuilderProtocol) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc final public class BidMachineRewarded : ObjectiveC.NSObject {
  @objc deinit
}
@objc extension BidMachine.BidMachineRewarded : BidMachine.BidMachineAdProtocol {
  @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
  @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc final public func loadAd()
  @objc final public func presentAd()
}
@_hasMissingDesignatedInitializers @available(*, deprecated, message: "The class will be removed in future versions")
@objc @_Concurrency.MainActor(unsafe) final public class BidMachineMedia : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToSuperview()
  @objc deinit
}
@objc extension BidMachine.BidMachineMedia : BidMachine.BidMachineAdProtocol {
  @_Concurrency.MainActor(unsafe) @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc final public func loadAd()
  @objc @_Concurrency.MainActor(unsafe) final public func pause()
  @objc @_Concurrency.MainActor(unsafe) final public func resume()
  @objc @_Concurrency.MainActor(unsafe) final public func mute()
  @objc @_Concurrency.MainActor(unsafe) final public func unmute()
}
@objc final public class BidMachineUnitConfiguration : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let format: BidMachineApiCore.PlacementFormat
  @objc final public let params: [Swift.String : Any]?
  @objc final public let extras: [Swift.String : Any]?
  @objc(initWithName:format:params:extras:) public init(_ name: Swift.String, _ format: BidMachineApiCore.PlacementFormat, _ params: [Swift.String : Any]? = nil, _ extras: [Swift.String : Any]? = nil)
  @objc deinit
}
public typealias BidMachineRequestBuilderBlock = (any BidMachine.BidMachineRequestBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineRequestBuilderProtocol {
  @objc @discardableResult
  func withPlacementId(_ ID: Swift.String) -> Self
  @objc @discardableResult
  func withPayload(_ payload: Swift.String) -> Self
  @objc @discardableResult
  func withTimeout(_ timeout: Swift.Double) -> Self
  @objc @discardableResult
  func withCustomParameters(_ params: [Swift.String : Any]) -> Self
  @objc @discardableResult
  func appendPriceFloor(_ price: Swift.Double, _ name: Swift.String) -> Self
  @objc @discardableResult
  func withUnitConfigurations(_ configurations: [BidMachine.BidMachineUnitConfiguration]) -> Self
  @objc @discardableResult
  func withContextualData(_ sessionDuration: Swift.UInt64, _ data: any BidMachine.BidMachineContextualDataProtocol) -> Self
}
@objc public protocol BidMachineRequestInfoProtocol {
  @objc var placement: BidMachine.BidMachineRequestPlacement { get }
  @objc var placementId: Swift.String? { get }
  @objc var payload: Swift.String? { get }
  @objc var timeout: Swift.Double { get }
  @objc var customParams: [Swift.String : Any] { get }
  @objc var priceFloors: [any BidMachine.BidMachinePriceFloorProtocol] { get }
  @objc var unitsConfigurations: [BidMachine.BidMachineUnitConfiguration] { get }
  @objc var sessionDuration: Swift.UInt64 { get }
  @objc var contextualData: (any BidMachine.BidMachineContextualDataProtocol)? { get }
}
@objc public protocol BidMachineRequestPopulatorProtocol {
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineRequestBuilderProtocol) -> Swift.Void)
}
@objc public protocol BidMachineRequestConfigurationProtocol : BidMachine.BidMachineRequestInfoProtocol, BidMachine.BidMachineRequestPopulatorProtocol {
}
@objc public protocol BidMachinePriceFloorProtocol {
  @objc var price: Swift.Double { get }
  @objc var name: Swift.String { get }
}
public typealias AdRouterCompletionBlock = () -> Swift.Void
@objc extension BidMachine.BidMachineSdk {
  @objc final public func registerNetworks(_ configurations: [BidMachine.BidMachineNetworkConfiguraton])
}
@objc public protocol BidMachineAdProtocol {
  @objc var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol { get }
  @objc var requestInfo: any BidMachine.BidMachineRequestInfoProtocol { get }
  @objc var controller: UIKit.UIViewController? { get set }
  @objc var delegate: (any BidMachine.BidMachineAdDelegate)? { get set }
  @objc var canShow: Swift.Bool { get }
  @objc func loadAd()
}
@objc public protocol BidMachineAdDelegate {
  @objc func didLoadAd(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc func didFailLoadAd(_ ad: any BidMachine.BidMachineAdProtocol, _ error: any Swift.Error)
  @objc optional func didPresentAd(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didFailPresentAd(_ ad: any BidMachine.BidMachineAdProtocol, _ error: any Swift.Error)
  @objc optional func didDismissAd(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func willPresentScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didDismissScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didPresentPartialScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didDismissPartialScreen(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didUserInteraction(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didExpired(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didTrackImpression(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didTrackInteraction(_ ad: any BidMachine.BidMachineAdProtocol)
  @objc optional func didReceiveReward(_ ad: any BidMachine.BidMachineAdProtocol)
}
@objc public protocol BidMachineNativeAdRendering {
  @objc var titleLabel: UIKit.UILabel? { get }
  @objc var callToActionLabel: UIKit.UILabel? { get }
  @objc var descriptionLabel: UIKit.UILabel? { get }
  @objc var iconView: UIKit.UIImageView? { get }
  @objc var mediaContainerView: UIKit.UIView? { get }
  @objc var adChoiceView: UIKit.UIView? { get }
}
@objc extension BidMachine.BidMachineSdk {
  @nonobjc final public func ad<U>(_ type: U.Type, _ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (U?, (any Swift.Error)?) -> Swift.Void) where U : BidMachine.BidMachineAdProtocol
  @objc final public func ad(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)?, _ completion: @escaping ((any BidMachine.BidMachineAdProtocol)?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func interstitial(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineInterstitial?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func rewarded(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineRewarded?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func banner(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineBanner?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, deprecated, message: "The method will be removed in future versions")
  final public func media(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineMedia?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func native(_ configuration: (any BidMachine.BidMachineRequestConfigurationProtocol)? = nil, _ completion: @escaping (BidMachine.BidMachineNative?, (any Swift.Error)?) -> Swift.Void)
}
@objc extension BidMachine.BidMachineSdk {
  @objc final public func requestConfiguration(_ format: BidMachineApiCore.PlacementFormat) throws -> any BidMachine.BidMachineRequestConfigurationProtocol
}
@objc extension Foundation.NSString {
  @objc dynamic public var bidmachine_placement_format: BidMachineApiCore.PlacementFormat {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc public class BidMachineRequestPlacement : ObjectiveC.NSObject {
  @objc public var name: Swift.String {
    @objc get
  }
  final public let placement: BidMachineApiCore.Placement
  @objc deinit
}
@objc public protocol BidMachineContextualDataProtocol {
  @objc var impressions: Swift.UInt32 { get }
  @objc var clickRate: Swift.Float { get }
  @objc var completionRate: Swift.Float { get }
  @objc var lastClickForImpression: Swift.Bool { get }
  @objc var lastBundle: Swift.String? { get }
  @objc var lastAdomain: Swift.String? { get }
}
@_hasMissingDesignatedInitializers @objc final public class BidMachineInterstitial : ObjectiveC.NSObject {
  @objc deinit
}
@objc extension BidMachine.BidMachineInterstitial : BidMachine.BidMachineAdProtocol {
  @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
  @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc final public func loadAd()
  @objc final public func presentAd()
}
@_hasMissingDesignatedInitializers @objc final public class BidMachineNative : ObjectiveC.NSObject {
  @objc deinit
}
@objc extension BidMachine.BidMachineNative : BidMachine.BidMachineAdProtocol {
  @objc final public var canShow: Swift.Bool {
    @objc get
  }
  @objc final public var requestInfo: any BidMachine.BidMachineRequestInfoProtocol {
    @objc get
  }
  @objc final public var auctionInfo: any BidMachine.BidMachineAuctionResponseProtocol {
    @objc get
  }
  @objc final public var delegate: (any BidMachine.BidMachineAdDelegate)? {
    @objc get
    @objc set
  }
  @objc final public var controller: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @objc final public func loadAd()
  @objc final public func presentAd(_ container: UIKit.UIView, _ renderingAd: any BidMachine.BidMachineNativeAdRendering) throws
  @objc final public func unregisterView()
}
@objc extension BidMachine.BidMachineNative {
  @objc final public var title: Swift.String? {
    @objc get
  }
  @objc final public var body: Swift.String? {
    @objc get
  }
  @objc final public var cta: Swift.String? {
    @objc get
  }
  @objc final public var icon: Swift.String? {
    @objc get
  }
  @objc final public var main: Swift.String? {
    @objc get
  }
  @objc final public var isVideo: Swift.Bool {
    @objc get
  }
  @objc final public func trackContainerAdded()
  @objc final public func trackImpression()
  @objc final public func trackClick()
}
public typealias BidMachinePublisherInfoBuilderBlock = (any BidMachine.BidMachinePublisherInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachinePublisherInfoBuilderProtocol {
  @objc @discardableResult
  func withId(_ id: Swift.String) -> Self
  @objc @discardableResult
  func withName(_ name: Swift.String) -> Self
  @objc @discardableResult
  func withDomain(_ domain: Swift.String) -> Self
  @objc @discardableResult
  func withCategories(_ cat: [Swift.String]) -> Self
}
@objc public protocol BidMachinePublisherInfoProtocol {
  @objc var ID: Swift.String? { get }
  @objc var name: Swift.String? { get }
  @objc var domain: Swift.String? { get }
  @objc var categories: [Swift.String] { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachinePublisherInfoBuilderProtocol) -> Swift.Void)
}
public typealias BidMachineTargetingInfoBuilderBlock = (any BidMachine.BidMachineTargetingInfoBuilderProtocol) -> Swift.Void
@objc(BidMachineUserGender) public enum UserGender : Swift.Int {
  case unknown = 0
  case male = 1
  case female = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(BidMachineFrameworkName) public enum FrameworkName : Swift.Int {
  case unknown = 0
  case native = 1
  case unity = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol BidMachineTargetingInfoBuilderProtocol {
  @objc @discardableResult
  func withUserId(_ id: Swift.String) -> Self
  @objc @discardableResult
  func withUserGender(_ gender: BidMachine.UserGender) -> Self
  @objc @discardableResult
  func withUserYOB(_ yob: Swift.UInt32) -> Self
  @objc @discardableResult
  func withUserLocation(_ location: CoreLocation.CLLocation) -> Self
  @objc @discardableResult
  func withCountry(_ country: Swift.String) -> Self
  @objc @discardableResult
  func withCity(_ city: Swift.String) -> Self
  @objc @discardableResult
  func withZip(_ zip: Swift.String) -> Self
  @objc @discardableResult
  func withKeywords(_ keywords: Swift.String) -> Self
  @objc @discardableResult
  func withBlockedApps(_ bapp: [Swift.String]) -> Self
  @objc @discardableResult
  func withBlockedCategories(_ bcat: [Swift.String]) -> Self
  @objc @discardableResult
  func withBlockedAdvertisers(_ badv: [Swift.String]) -> Self
  @objc @discardableResult
  func withStoreURL(_ url: Swift.String) -> Self
  @objc @discardableResult
  func withStoreId(_ id: Swift.String) -> Self
  @objc @discardableResult
  func withStoreCategory(_ cat: Swift.String) -> Self
  @objc @discardableResult
  func withStoreSubCategories(_ subcat: [Swift.String]) -> Self
  @objc @discardableResult
  func withPaid(_ paid: Swift.Bool) -> Self
  @objc @discardableResult
  func withFrameworkName(_ name: BidMachine.FrameworkName) -> Self
  @objc @discardableResult
  func appendExternalId(_ sourceId: Swift.String, _ sourceValue: Swift.String) -> Self
}
@objc public protocol BidMachineTargetingInfoProtocol {
  @objc var userId: Swift.String? { get }
  @objc var userGender: BidMachine.UserGender { get }
  @objc var userYOB: Swift.UInt32 { get }
  @objc var userLocation: CoreLocation.CLLocation? { get }
  @objc var country: Swift.String? { get }
  @objc var city: Swift.String? { get }
  @objc var zip: Swift.String? { get }
  @objc var keywords: Swift.String? { get }
  @objc var blockedApps: [Swift.String] { get }
  @objc var blockedCategories: [Swift.String] { get }
  @objc var blockedAdvertisers: [Swift.String] { get }
  @objc var storeURL: Swift.String? { get }
  @objc var storeId: Swift.String? { get }
  @objc var storeCategory: Swift.String? { get }
  @objc var storeSubCategories: [Swift.String] { get }
  @objc var paid: Swift.Bool { get }
  @objc var frameworkName: BidMachine.FrameworkName { get }
  @objc var externalIds: [Swift.String : Swift.String] { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineTargetingInfoBuilderProtocol) -> Swift.Void)
}
public typealias BidMachineRegulationInfoBuilderBlock = (any BidMachine.BidMachineRegulationInfoBuilderProtocol) -> Swift.Void
@objc public protocol BidMachineRegulationInfoBuilderProtocol {
  @objc @discardableResult
  func withCOPPA(_ coppa: Swift.Bool) -> Self
  @objc @discardableResult
  func withGDPRZone(_ gdpr: Swift.Bool) -> Self
  @objc @discardableResult
  func withGDPRConsent(_ consent: Swift.Bool) -> Self
  @objc @discardableResult
  func withGDPRConsentString(_ consent: Swift.String) -> Self
  @objc @discardableResult
  func withUSPrivacyString(_ privacy: Swift.String) -> Self
  @objc @discardableResult
  func withGPP(_ gpp: Swift.String, _ sid: [Swift.UInt32]) -> Self
}
@objc public protocol BidMachineRegulationZoneProtocol {
  @objc var isZone: Swift.Bool { get }
  @objc var isConsent: Swift.Bool { get }
  @objc var zoneValue: Swift.String? { get }
}
@objc public protocol BidMachineRegulationGPPProtocol {
  @objc var gpp: Swift.String? { get }
  @objc var sid: [Swift.UInt32]? { get }
}
@objc public protocol BidMachineRegulationInfoProtocol {
  @objc var COPPA: Swift.Bool { get }
  @objc var GPPZone: any BidMachine.BidMachineRegulationGPPProtocol { get }
  @objc var CCPAZone: any BidMachine.BidMachineRegulationZoneProtocol { get }
  @objc var GDPRZone: any BidMachine.BidMachineRegulationZoneProtocol { get }
  @objc func populate(_ builderBlock: (any BidMachine.BidMachineRegulationInfoBuilderProtocol) -> Swift.Void)
}
extension BidMachine.UserGender : Swift.Equatable {}
extension BidMachine.UserGender : Swift.Hashable {}
extension BidMachine.UserGender : Swift.RawRepresentable {}
extension BidMachine.FrameworkName : Swift.Equatable {}
extension BidMachine.FrameworkName : Swift.Hashable {}
extension BidMachine.FrameworkName : Swift.RawRepresentable {}
