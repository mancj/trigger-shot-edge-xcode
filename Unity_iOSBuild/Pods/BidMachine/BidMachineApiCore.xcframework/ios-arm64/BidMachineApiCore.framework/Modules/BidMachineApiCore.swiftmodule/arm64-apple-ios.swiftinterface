// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidMachineApiCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import BidMachineApiCore
import CoreLocation
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
extension Swift.Dictionary {
  public func mapKeys<Transformed>(_ transform: (Key) throws -> Transformed) rethrows -> [Transformed : Value] where Transformed : Swift.Hashable
  public func mapKeys<Transformed>(_ transform: (Key) throws -> Transformed, uniquingKeysWith combine: (Value, Value) throws -> Value) rethrows -> [Transformed : Value] where Transformed : Swift.Hashable
  public func compactMapKeys<Transformed>(_ transform: (Key) throws -> Transformed?) rethrows -> [Transformed : Value] where Transformed : Swift.Hashable
}
extension Swift.Dictionary where Key == Swift.String {
  public func decode<T>(_ value: T.Type) throws -> T where Value == BidMachineApiCore.AnyCodable, T : Swift.Decodable
  public func decode<T>(_ value: T.Type) throws -> T where Value == Any, T : Swift.Decodable
  public func stringify() throws -> Swift.String
}
public enum DispatchPipeline {
  public enum LineType {
    case serial
    case concurent
    public static func == (a: BidMachineApiCore.DispatchPipeline.LineType, b: BidMachineApiCore.DispatchPipeline.LineType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case main
  case global
  case background(_: BidMachineApiCore.DispatchPipeline.LineType)
  case unknown(_: Swift.String, _: BidMachineApiCore.DispatchPipeline.LineType)
}
extension BidMachineApiCore.DispatchPipeline {
  public func sync<T>(execute work: () throws -> T) rethrows -> T
  public func async(execute work: @escaping () -> Swift.Void)
}
extension Swift.Array {
  public func decode<T>(_ value: T.Type) throws -> T where Element == BidMachineApiCore.AnyCodable, T : Swift.Decodable
  public func decode<T>(_ value: T.Type) throws -> T where Element == Any, T : Swift.Decodable
}
public struct ApiDefines {
  public static let version: Swift.String
  public static let sdkName: Swift.String
  public static let partnerName: Swift.String
  public static let partnerVersion: Swift.String
}
public struct BidMachineTime {
}
extension BidMachineApiCore.BidMachineTime {
  public static func timeSince1970() -> BidMachineApiCore.BidMachineTime
  public static func timeSince1970(_ interval: Foundation.TimeInterval) -> BidMachineApiCore.BidMachineTime
  public var timeInterval: Foundation.TimeInterval {
    get
  }
  public var interval: BidMachineApiCore.BidMachineTimeInterval {
    get
  }
  public var date: Foundation.Date {
    get
  }
}
extension BidMachineApiCore.BidMachineTime : Swift.Comparable {
  public static func < (lhs: BidMachineApiCore.BidMachineTime, rhs: BidMachineApiCore.BidMachineTime) -> Swift.Bool
  public static func == (lhs: BidMachineApiCore.BidMachineTime, rhs: BidMachineApiCore.BidMachineTime) -> Swift.Bool
  public static func + (lhs: BidMachineApiCore.BidMachineTime, rhs: BidMachineApiCore.BidMachineTimeInterval) -> BidMachineApiCore.BidMachineTime
  public static func - (lhs: BidMachineApiCore.BidMachineTime, rhs: BidMachineApiCore.BidMachineTimeInterval) -> BidMachineApiCore.BidMachineTime
  public static func - (lhs: BidMachineApiCore.BidMachineTime, rhs: BidMachineApiCore.BidMachineTime) -> BidMachineApiCore.BidMachineTimeInterval
}
extension Swift.String {
  public func JSON() throws -> [Swift.String : Any]
}
public enum Gender : Swift.String {
  case unknown
  case male
  case female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Currency : Swift.String {
  case unknown
  case USD
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceType {
  case unknown
  case phone
  case tablete
  public static func == (a: BidMachineApiCore.DeviceType, b: BidMachineApiCore.DeviceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuctionType {
  case unknown
  case first
  case second
  public static func == (a: BidMachineApiCore.AuctionType, b: BidMachineApiCore.AuctionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConnectionType {
  case unknown
  case wifi
  case cellular
  public static func == (a: BidMachineApiCore.ConnectionType, b: BidMachineApiCore.ConnectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OsType {
  case unknown
  case ios
  public static func == (a: BidMachineApiCore.OsType, b: BidMachineApiCore.OsType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LocationType {
  case unknown
  case user
  case gps
  public static func == (a: BidMachineApiCore.LocationType, b: BidMachineApiCore.LocationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct BidMachineError {
}
extension BidMachineApiCore.BidMachineError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension BidMachineApiCore.BidMachineError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BidMachineApiCore.BidMachineError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var wrappedError: (any Swift.Error)? {
    get
  }
  public var module: Swift.String {
    get
  }
}
public struct BidMachineDispatcher {
  public static func async(_ block: @escaping () -> Swift.Void)
  public static func main(_ block: @escaping () -> Swift.Void)
  public static func mainSync<T>(execute work: () throws -> T) rethrows -> T
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func edgesEqual(to view: UIKit.UIView)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static var topController: UIKit.UIViewController? {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BidMachineAsyncOperation : Foundation.Operation {
  public enum Thread {
    case main, background
    public static func == (a: BidMachineApiCore.BidMachineAsyncOperation.Thread, b: BidMachineApiCore.BidMachineAsyncOperation.Thread) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum State : Swift.String {
    case ready, executing, finished
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var thread: BidMachineApiCore.BidMachineAsyncOperation.Thread {
    get
    set
  }
  public var state: BidMachineApiCore.BidMachineAsyncOperation.State {
    get
    set
  }
  @objc override dynamic open var isReady: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func start()
  @objc override dynamic open func cancel()
  @objc override dynamic public init()
  @objc deinit
}
public protocol EnvironmentData {
  var sdk: any BidMachineApiCore.SdkEnvironment { get }
  var session: any BidMachineApiCore.SessionEnvironment { get }
  var publisher: any BidMachineApiCore.PublisherEnvironment { get }
  var targeting: any BidMachineApiCore.TargetingEnvironment { get }
  var regulation: any BidMachineApiCore.RegulationEnvironment { get }
  var device: any BidMachineApiCore.DeviceEnvironment { get }
  var auction: any BidMachineApiCore.AuctionEnvironment { get }
  var bidding: any BidMachineApiCore.BiddingEnvironment { get }
}
public protocol SdkEnvironment {
  var version: Swift.String { get }
  var name: Swift.String { get }
  var SSP: Swift.String { get }
  var sourceId: Swift.String { get }
  var isTestMode: Swift.Bool { get }
}
public protocol SessionEnvironment {
  var id: Swift.String { get }
  var duration: BidMachineApiCore.BidMachineTimeInterval { get }
}
public protocol AuctionEnvironment {
  var domainSpec: Swift.String { get }
  var domainVersion: Swift.String { get }
  var protocolVersion: Swift.String { get }
  var currency: BidMachineApiCore.Currency { get }
  var type: BidMachineApiCore.AuctionType { get }
  var tmax: BidMachineApiCore.BidMachineTimeInterval { get }
}
public protocol BiddingOMID {
  var partnerName: Swift.String { get }
  var partnerVersion: Swift.String { get }
}
public protocol BiddingEnvironment {
  var isTestMode: Swift.Bool { get }
  var isLoggingMode: Swift.Bool { get }
  var omid: any BidMachineApiCore.BiddingOMID { get }
}
public protocol PublisherEnvironment {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var domain: Swift.String { get }
  var categories: [Swift.String] { get }
}
public protocol TargetingEnvironment {
  var userId: Swift.String { get }
  var userGender: BidMachineApiCore.Gender { get }
  var userYOB: Swift.UInt32 { get }
  var keywords: Swift.String { get }
  var country: Swift.String { get }
  var city: Swift.String { get }
  var zip: Swift.String { get }
  var userLocation: CoreLocation.CLLocation? { get }
  var blockedApps: [Swift.String] { get }
  var blockedCategories: [Swift.String] { get }
  var blockedAdvertisers: [Swift.String] { get }
  var storeURL: Swift.String { get }
  var storeId: Swift.String { get }
  var storeCategory: Swift.String { get }
  var storeSubCategories: [Swift.String] { get }
  var paid: Swift.Bool { get }
  var frameworkName: Swift.String { get }
  var externalIds: [Swift.String : Swift.String] { get }
}
public protocol RegulationGPPEnvironment {
  var gpp: Swift.String? { get }
  var sid: [Swift.UInt32]? { get }
}
public protocol RequlationZoneEnvironment {
  var isZone: Swift.Bool { get }
  var isConsent: Swift.Bool { get }
  var value: Swift.String? { get }
}
public protocol RegulationEnvironment {
  var COPPA: Swift.Bool { get }
  var GPPZone: any BidMachineApiCore.RegulationGPPEnvironment { get }
  var CCPAZone: any BidMachineApiCore.RequlationZoneEnvironment { get }
  var GDPRZone: any BidMachineApiCore.RequlationZoneEnvironment { get }
}
extension BidMachineApiCore.RegulationEnvironment {
  public var coppaRestricted: Swift.Bool {
    get
  }
  public var gdprRestricted: Swift.Bool {
    get
  }
}
public protocol DeviceEnvironment {
  var appBundle: Swift.String { get }
  var appVersion: Swift.String { get }
  var appName: Swift.String { get }
  var deviceName: Swift.String { get }
  var IFA: Swift.String { get }
  var IFV: Swift.String { get }
  var BMIFV: Swift.String { get }
  var atts: Swift.UInt32 { get }
  var debug: Swift.Bool { get }
  var secure: Swift.Bool { get }
  var type: BidMachineApiCore.DeviceType { get }
  var userAgent: Swift.String { get }
  var limitAdTracking: Swift.Bool { get }
  var connectionType: BidMachineApiCore.ConnectionType { get }
  var mccmnc: Swift.String { get }
  var carrier: Swift.String { get }
  var width: Swift.UInt32 { get }
  var height: Swift.UInt32 { get }
  var ppi: Swift.UInt32 { get }
  var pxratio: Swift.Float { get }
  var os: BidMachineApiCore.OsType { get }
  var osv: Swift.String { get }
  var hwv: Swift.String { get }
  var make: Swift.String { get }
  var model: Swift.String { get }
  var language: Swift.String { get }
  var deviceLocation: CoreLocation.CLLocation? { get }
  var utc: Swift.Int32 { get }
  var diskSpace: Swift.UInt64 { get }
  var totalDisk: Swift.UInt64 { get }
  var totalMem: Swift.UInt64 { get }
  var charging: Swift.Bool { get }
  var headset: Swift.Bool { get }
  var headsetName: Swift.String { get }
  var batteryLevel: Swift.Float { get }
  var batterySaver: Swift.Bool { get }
  var darkMode: Swift.Bool { get }
  var time: Foundation.TimeInterval { get }
  var screenBright: Swift.Float { get }
  var jailBreak: Swift.Bool { get }
  var lastBootup: Foundation.TimeInterval { get }
  var accessability: Swift.String { get }
  var registeredSKNetworks: [Swift.String] { get }
}
@dynamicMemberLookup final public class Synchronized<Value> {
  public init(_ value: Value)
  final public func read<T>(_ operation: (Value) throws -> T) rethrows -> T
  @discardableResult
  final public func write<T>(_ operation: (inout Value) throws -> T) rethrows -> T
  final public subscript<Property>(dynamicMember keyPath: Swift.WritableKeyPath<Value, Property>) -> Property {
    get
    set
  }
  final public subscript<Property>(dynamicMember keyPath: Swift.KeyPath<Value, Property>) -> Property {
    get
  }
  @objc deinit
}
public enum BidMachineTimeInterval {
  case seconds(Swift.Int64)
  case milliseconds(Swift.Int64)
  case microseconds(Swift.Int64)
  case nanoseconds(Swift.Int64)
}
extension BidMachineApiCore.BidMachineTimeInterval {
  public var seconds: Swift.Int64 {
    get
  }
  public var milliseconds: Swift.Int64 {
    get
  }
  public var microseconds: Swift.Int64 {
    get
  }
  public var nanoseconds: Swift.Int64 {
    get
  }
}
extension BidMachineApiCore.BidMachineTimeInterval : Swift.Comparable {
  public static func < (lhs: BidMachineApiCore.BidMachineTimeInterval, rhs: BidMachineApiCore.BidMachineTimeInterval) -> Swift.Bool
  public static func == (lhs: BidMachineApiCore.BidMachineTimeInterval, rhs: BidMachineApiCore.BidMachineTimeInterval) -> Swift.Bool
  public static func + (lhs: BidMachineApiCore.BidMachineTimeInterval, rhs: BidMachineApiCore.BidMachineTimeInterval) -> BidMachineApiCore.BidMachineTimeInterval
  public static func - (lhs: BidMachineApiCore.BidMachineTimeInterval, rhs: BidMachineApiCore.BidMachineTimeInterval) -> BidMachineApiCore.BidMachineTimeInterval
}
public struct BidMachineTimeWall {
}
extension BidMachineApiCore.BidMachineTimeWall {
  public static func now() -> BidMachineApiCore.BidMachineTimeWall
  public mutating func start()
  public mutating func finish()
}
extension BidMachineApiCore.BidMachineTimeWall {
  public var interval: BidMachineApiCore.BidMachineTimeInterval {
    get
  }
  public var startTime: BidMachineApiCore.BidMachineTime {
    get
  }
  public var finishTime: BidMachineApiCore.BidMachineTime {
    get
  }
}
extension Swift.Encodable {
  public func serialiseJson() throws -> Swift.Dictionary<Swift.String, Any>
  public func serializeJsonString() throws -> Swift.String
}
public struct AnyCodable : Swift.Codable {
  public init<T>(_ value: T?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BidMachineApiCore.AnyCodable {
  public func value<T>(_ type: T.Type) -> T?
}
public struct Placement : Swift.Equatable {
  public let type: BidMachineApiCore.PlacementType
  public init(_ type: BidMachineApiCore.PlacementType)
  public static func == (lhs: BidMachineApiCore.Placement, rhs: BidMachineApiCore.Placement) -> Swift.Bool
}
extension BidMachineApiCore.Placement {
  public var isInterstitial: Swift.Bool {
    get
  }
  public var isBanner: Swift.Bool {
    get
  }
  public var isNative: Swift.Bool {
    get
  }
  public var isRewarded: Swift.Bool {
    get
  }
  public var isMedia: Swift.Bool {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
}
public protocol BidMachineErrorTypeBuilder {
  var connection: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var badContent: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var timeout: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var noContent: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var exception: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var wasDestroyed: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var wasExpired: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var server: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var badRequest: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var headerBidding: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
  var interior: any BidMachineApiCore.BidMachineErrorValueBuilder { get }
}
public protocol BidMachineErrorValueBuilder {
  func withDescription(_ description: Swift.String) -> BidMachineApiCore.BidMachineError
  func withError(_ description: Swift.String, _ error: (any Swift.Error)?) -> BidMachineApiCore.BidMachineError
  func withExeption(_ description: Swift.String, _ error: any Swift.Error) -> BidMachineApiCore.BidMachineError
}
@objc(BidMachinePlacementFormat) public enum PlacementFormat : Swift.Int {
  case unknown
  case banner
  case banner320x50
  case banner728x90
  case banner300x250
  case interstitial
  case interstitialVideo
  case interstitialStatic
  case rewarded
  case rewardedVideo
  case rewardedStatic
  @available(*, deprecated, message: "The type will be removed in future versions")
  case media
  case native
  case nativeIcon
  case nativeImage
  case nativeVideo
  case nativeIconAndVideo
  case nativeIconAndImage
  case nativeImageAndVideo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BidMachineApiCore.PlacementFormat {
  public func placementType() -> BidMachineApiCore.PlacementType?
}
extension Foundation.NSString {
  public func placementFormat() -> BidMachineApiCore.PlacementFormat
}
public protocol ApiMockProviderMethod {
  static var cls: Swift.String { get }
  var rawValue: Swift.String { get }
  var cast: (_ cls: Swift.AnyClass, _ sel: ObjectiveC.Selector, _ imp: ObjectiveC.IMP) -> Any? { get }
}
public class ApiMockProvider<M> where M : BidMachineApiCore.ApiMockProviderMethod {
  required public init?(_ protoc: ObjectiveC.`Protocol`)
  public func createInstance<T>() -> T?
  @discardableResult
  public func classImpelementation<T>(_ mock: M, shouldValidate: Swift.Bool = false) -> T? where T : ObjectiveC.NSObjectProtocol
  @discardableResult
  public func classImpelementation(_ mock: M, shouldValidate: Swift.Bool = false) -> (any ObjectiveC.NSObjectProtocol)?
  @discardableResult
  public func instanceImplementation<T>(_ mock: M) -> T?
  @objc deinit
}
public enum ApiMockProviderValidationResult {
  case valid
  case inValid(message: Swift.String)
}
extension BidMachineApiCore.ApiMockProvider {
  public func validateInstance<T>(_ instance: T) -> BidMachineApiCore.ApiMockProviderValidationResult where T : ObjectiveC.NSObjectProtocol
}
public enum PlacementType : Swift.Hashable {
  case media(_: Swift.Bool, _: Swift.Bool)
  case banner(_: Swift.UInt32)
  case native(_: Swift.Bool, _: Swift.Bool, _: Swift.Bool)
  case rewarded(_: Swift.Bool, _: Swift.Bool)
  case interstitial(_: Swift.Bool, _: Swift.Bool)
  public static func == (lhs: BidMachineApiCore.PlacementType, rhs: BidMachineApiCore.PlacementType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BidMachineApiCore.PlacementType {
  public var name: Swift.String {
    get
  }
  public var isVideo: Swift.Bool {
    get
  }
  public var isStatic: Swift.Bool {
    get
  }
  public var isNative: Swift.Bool {
    get
  }
}
public struct ErrorProvider {
  public static func unknown(_ name: Swift.String) -> any BidMachineApiCore.BidMachineErrorTypeBuilder
  public static var sdk: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
  public static var api: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
  public static var adapter: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
  public static var network: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
  public static var bidding: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
  public static var display: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
  public static var analytics: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
  public static var event: any BidMachineApiCore.BidMachineErrorTypeBuilder {
    get
  }
}
extension BidMachineApiCore.DispatchPipeline.LineType : Swift.Equatable {}
extension BidMachineApiCore.DispatchPipeline.LineType : Swift.Hashable {}
extension BidMachineApiCore.Gender : Swift.Equatable {}
extension BidMachineApiCore.Gender : Swift.Hashable {}
extension BidMachineApiCore.Gender : Swift.RawRepresentable {}
extension BidMachineApiCore.Currency : Swift.Equatable {}
extension BidMachineApiCore.Currency : Swift.Hashable {}
extension BidMachineApiCore.Currency : Swift.RawRepresentable {}
extension BidMachineApiCore.DeviceType : Swift.Equatable {}
extension BidMachineApiCore.DeviceType : Swift.Hashable {}
extension BidMachineApiCore.AuctionType : Swift.Equatable {}
extension BidMachineApiCore.AuctionType : Swift.Hashable {}
extension BidMachineApiCore.ConnectionType : Swift.Equatable {}
extension BidMachineApiCore.ConnectionType : Swift.Hashable {}
extension BidMachineApiCore.OsType : Swift.Equatable {}
extension BidMachineApiCore.OsType : Swift.Hashable {}
extension BidMachineApiCore.LocationType : Swift.Equatable {}
extension BidMachineApiCore.LocationType : Swift.Hashable {}
extension BidMachineApiCore.BidMachineAsyncOperation.Thread : Swift.Equatable {}
extension BidMachineApiCore.BidMachineAsyncOperation.Thread : Swift.Hashable {}
extension BidMachineApiCore.BidMachineAsyncOperation.State : Swift.Equatable {}
extension BidMachineApiCore.BidMachineAsyncOperation.State : Swift.Hashable {}
extension BidMachineApiCore.BidMachineAsyncOperation.State : Swift.RawRepresentable {}
extension BidMachineApiCore.PlacementFormat : Swift.Equatable {}
extension BidMachineApiCore.PlacementFormat : Swift.Hashable {}
extension BidMachineApiCore.PlacementFormat : Swift.RawRepresentable {}
